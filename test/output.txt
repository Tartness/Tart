FUNCTION(PARSE_YAML YAML_PATH)
  MESSAGE(STATUS "YAML_PATH: " ${YAML_PATH})
  FILE(STRINGS ${YAML_PATH} YAML_CONTENT)
  MESSAGE(STATUS "YAML_CONTENT: " ${YAML_CONTENT})
  # STRING(REGEX MATCH "s/:[^:\/\/]/="/g;s/$/"/g;s/ *=/=/g"
  #        YAML_REGEX ${YAML_CONTENT})
  # STRING(REGEX MATCHALL "s/:[^:\/\/]/="/g;s/$/"/g;s/ *=/=/g"
  #        YAML_REGEX ${YAML_CONTENT})
  # MESSAGE(STATUS "YAML_CONTENT: " ${YAML_CONTENT})
  SET(LAST_NODE_IS_LIST FALSE)

  FOREACH(YAML_FILE_LINE ${YAML_CONTENT})
    MESSAGE(STATUS "YAML_FILE_LINE: " ${YAML_FILE_LINE})

    # Strip leading spaces
    STRING(REGEX REPLACE "^[ ]+" "" YAML_FILE_LINE ${YAML_FILE_LINE})
    MESSAGE(STATUS "    w/o whspc: " ${YAML_FILE_LINE})

    # Find variable name
    STRING(REGEX MATCH "^[^:]+" NODE_NAME ${YAML_FILE_LINE})
    MESSAGE(STATUS "NODE_NAME: " ${NODE_NAME})
    MESSAGE(STATUS "XXX " ${LAST_NODE_IS_LIST})


    # Check if entry is part of a node list
    IF(${NODE_NAME} MATCHES "^-(.*)")
      # We are dealing with a list entry in the last node's NODE_NAME
      IF(${LAST_NODE_IS_LIST})
        STRING(REPLACE "-" "" NODE_VALUE ${YAML_FILE_LINE})
        MESSAGE(STATUS "NODE_VALUE: " ${NODE_VALUE})
      ELSE()
        MESSAGE(ERROR "Unexpected - found. This should be no list")
      ENDIF()
    ELSE()
      # We are dealing with a new node entry
      IF(${YAML_FILE_LINE} MATCHES ${NODE_NAME})
        # We have detected a node that has no entries, i.e. it is the beginning of a list
        SET(LAST_NODE_IS_LIST TRUE)
        MESSAGE(STATUS "NODE_NAME: " ${NODE_NAME} " is a list")
        MESSAGE(STATUS "HHHHHHHHHHHH")
      ELSE()
        # we are dealing with a one-line node
        STRING(REPLACE "${NODE_NAME}: " "" NODE_VALUE ${YAML_FILE_LINE})
        MESSAGE(STATUS "NODE_VALUE: " ${NODE_VALUE})
        SET(LAST_NODE_IS_LIST FALSE)
      ENDIF()

      # Store line if it was a node
      SET(${LAST_NODE_NAME} "${YAML_FILE_LINE}")
    ENDIF()

    # Set the variable
    SET(${NODE_NAME} "${NODE_VALUE}")
  ENDFOREACH()
  # # Uncomment to display all CMAKE variables:
  # GET_CMAKE_PROPERTY(VARIABLE_NAMES VARIABLES)
  # FOREACH (VARIABLE_NAME ${VARIABLE_NAMES})
  #    MESSAGE(STATUS "${VARIABLE_NAME}=${${VARIABLE_NAME}}")
  # ENDFOREACH()
ENDFUNCTION(PARSE_YAML)
