# Process an entry of the yaml dependency list
FUNCTION(PROCESS_DEPENDENCY_ENTRIES PARENT_BUILD_TARGET ENTRIES ENTRY_INDENTS)
  GET_ENTRY_VALUES("dependency" "${ENTRIES}" "${ENTRY_INDENTS}" DEPENDENCIES HAS_SUBTREE)
  TART_TMP("${DEPENDENCIES}")
  
  FOREACH(DEPENDENCY ${DEPENDENCIES})
    GET_ENTRY_VALUES("${DEPENDENCY}" "${ENTRIES}" "${ENTRY_INDENTS}" DEPENDENCY_DETAILS HAS_SUBTREE)
    LIST(LENGTH DEPENDENCY_DETAILS NUMBER_OF_DETAILS)
    IF(NUMBER_OF_DETAILS EQUAL 0)
      TART_DEBUG("No details for dependency ${DEPENDENCY}, adding local version..")
      ADD_TART_DEPENDENCY(${PARENT_BUILD_TARGET} ${DEPENDENCY})
      CONTINUE()
    ENDIF()
    
    FOREACH(DETAIL ${DEPENDENCY_DETAILS})
      TART_PUBLIC(${DETAIL})
      IF(${DETAIL} STREQUAL "host")
        GET_ENTRY_VALUES("${DETAIL}" "${ENTRIES}" "${ENTRY_INDENTS}" DEPENDENCY_DETAILS HAS_SUBTREE)

        TART_TMP("match")
      ENDIF()
    ENDFOREACH()
    
    # set default values
    SET(GIT_URL)
    SET(GIT_CHECKOUT)
    GET_GIT_REPO_URL_AND_TAG_FROM_DETAILS("${CURRENT_DETAILS}" "${LAST_ENTRY}" GIT_URL GIT_TAG)
    ASSERT_LIB_AVAILABILITY("${GIT_URL}" "${GIT_TAG}" "${CMAKE_CURRENT_LIST_DIR}/..")

  ENDFOREACH()
  # STRING(REPLACE "&" ";" DEP_ENTRY_LIST ${DEPENDENCY_ENTRY})
  # LIST(LENGTH DEP_ENTRY_LIST DEP_ENTRY_LIST_LENGTH)
  # # LIST(FIND ENTRIES ${QUERY_ENTRY} QUERY_INDEX)
  # IF(DEP_ENTRY_LIST_LENGTH GREATER 1)
  #   # Dependency entry has details, not only tart package name
  #   LIST(GET DEP_ENTRY_LIST "0" FIRST_DEP_ENTRY)
  #   SET(REPO_HOST_LIST "gitlab;github;")
  #   LIST(FIND REPO_HOST_LIST ${FIRST_DEP_ENTRY} INDEX)
  #   IF(${INDEX} GREATER -1)
  #     # Repo is at gitlab or github
  #     SET(${GIT_URL} "https://github.com/${DETAIL}/${REPO_NAME}.git" PARENT_SCOPE)
  #     IF(${FIRST_DEP_ENTRY} STREQUAL "gitlab")
  #       SET(REPO_HOST "https://www.gitlab.com/")
  #     ELSE()
  #       SET(REPO_HOST "https://www.github.com/")
  #     ENDIF()
  # 
  #     LIST(GET DEP_ENTRY_LIST "1" FIRST_DEP_ENTRY)
  # 
  # # Check if current depenency entry opens details
  # STRING(COMPARE EQUAL "${DEPENDENCY_ENTRY}" "at" DETAILS_START)
  # IF(DETAILS_START)
  #   SET(IS_IN_DETAILS TRUE)
  # ENDIF()
  # TART_DEBUG("processing: ${DEPENDENCY_ENTRY}")
  # IF(IS_IN_DETAILS)
  #   TART_DEBUG("IS_IN_DETAILS")
  #   STRING(COMPARE EQUAL "${DEPENDENCY_ENTRY}" "end" DETAILS_ENDED)
  #   IF(DETAILS_ENDED)
  #     TART_DEBUG("DETAILS_ENDED")
  #     SET(IS_IN_DETAILS FALSE)
  #     GET_GIT_REPO_URL_AND_TAG_FROM_DETAILS("${CURRENT_DETAILS}" "${LAST_ENTRY}" GIT_URL GIT_TAG)
  #     ASSERT_LIB_AVAILABILITY("${GIT_URL}" "${GIT_TAG}" "${CMAKE_CURRENT_LIST_DIR}/..")
  #     SET(CURRENT_DETAILS "")
  #   ELSE()
  #     TART_DEBUG("STILL_IN_DETAILS")
  #     LIST(APPEND CURRENT_DETAILS ${DEPENDENCY_ENTRY})
  #   ENDIF()
  # ELSE()
  #   #TODO(nidegen) is getting called at "github"
  #   TART_DEBUG("NOT_IN_DETAILS")
  #   STRING(COMPARE EQUAL "${LAST_ENTRY}" "" HAS_NO_PREVIOUS_ENTRY)
  #   IF(NOT HAS_NO_PREVIOUS_ENTRY)
  #     ADD_TART_DEPENDENCY(${LIBRARY_NAME} ${LAST_ENTRY} )
  #   ENDIF()
  #   SET(LAST_ENTRY ${DEPENDENCY_ENTRY})
  # ENDIF()
ENDFUNCTION(PROCESS_DEPENDENCY_ENTRIES)
