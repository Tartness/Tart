FUNCTION(ADD_TART_TARGET PACKAGE_NAME)
  SET(DEPENDENCY_LIST "")
  TART_INFO("Adding package '${PACKAGE_NAME}' to generated project")
  FIND_PACKAGE_TART_YAML_FILEPATH("${CMAKE_CURRENT_LIST_DIR}/.." ${PACKAGE_NAME} PACKAGE_DIR)
  PARSE_YAML("${PACKAGE_DIR}/tart.yaml" NODE_NAMES NODE_VALS NODE_INDENTS)

  FIND_LIST_VALUE("include_dir" "${NODE_NAMES}" "${NODE_VALS}" INCLUDE_DIR)
  FIND_LIST_VALUE("src_dir" "${NODE_NAMES}" "${NODE_VALS}" SOURCE_DIR)
  # FIND_LIST_VALUE("main" "${NODE_NAMES}" "${NODE_VALS}" MAIN_PATH)
  FIND_LIST_VALUE("lib_name" "${NODE_NAMES}" "${NODE_VALS}" PACKAGE_NAME)
  FIND_LIST_VALUE("dependency" "${NODE_NAMES}" "${NODE_VALS}" DEPENDENCY_LIST)
  FIND_LIST_VALUE("target_properties" "${NODE_NAMES}" "${NODE_VALS}" TARGET_PROPERTIES_LIST)

  FILE(GLOB_RECURSE LIB_SOURCES "${PACKAGE_DIR}/${SOURCE_DIR}/*.cc"
                                "${PACKAGE_DIR}/${SOURCE_DIR}/*.cpp"
                                "${PACKAGE_DIR}/${INCLUDE_DIR}/*.h")

  TART_DEBUG("${PACKAGE_NAME} sources: ${LIB_SOURCES}")
  ADD_EXECUTABLE(${PACKAGE_NAME} ${LIB_SOURCES})
  TARGET_INCLUDE_DIRECTORIES(${PACKAGE_NAME} PRIVATE "${PACKAGE_DIR}/${INCLUDE_DIR}")

  # SET_TARGET_PROPERTIES(${PACKAGE_NAME} PROPERTY CXX_STANDARD 14)
  

  GET_YAML_ENTRIES_WITH_INDENDTS("${PACKAGE_DIR}/tart.yaml" ENTRIES ENTRY_INDENTS)
  
  PROCESS_DEPENDENCY_ENTRIES(${PACKAGE_NAME} "${ENTRIES}" "${ENTRY_INDENTS}")
  PROCESS_TARGET_PROPERTIES(${PACKAGE_NAME} "${ENTRIES}" "${ENTRY_INDENTS}")
  PROCESS_CUSTOM_CONFIG_PROPERTIES(${PACKAGE_NAME} "${ENTRIES}" "${ENTRY_INDENTS}")
  PROCESS_TARGET_OS_PROPERTIES(${PACKAGE_NAME} "${ENTRIES}" "${ENTRY_INDENTS}")
  PROCESS_TARGET_ARCH_PROPERTIES(${PACKAGE_NAME} "${ENTRIES}" "${ENTRY_INDENTS}")
  
  # TODO(nidegen) implement following:
  # IF(GENERATOR_IS_XCODE)
  #   INHERIT_XCODE_COMPILATION_OPTIONS(${PARENT_BUILD_TARGET} ${PACKAGE_NAME})
  # ENDIF()
    
ENDFUNCTION(ADD_TART_TARGET)
