# STRIP_YAML_LINE()
# This function takes a raw yaml line as input and returns the stripped values
#     and the indentaton level
FUNCTION(STRIP_YAML_LINE LINE_STRING STRIPPED_LINE_STRING INDENTATION_LEVEL)
  # Strip comments form string
  STRING(REGEX REPLACE "\#.*$" "" LINE_STRING ${LINE_STRING})
  IF("${LINE_STRING}" STREQUAL "")
  # TART_DEBUG("Empty line found")
    SET(${INDENTATION_LEVEL} "-1" PARENT_SCOPE)
    SET(${STRIPPED_LINE_STRING} "" PARENT_SCOPE)
    RETURN()
  ENDIF()

  # Strip leading/trailing spaces and comments
  STRING(REGEX REPLACE "^[ ]+" "" LINE_STRING_NO_INDENT ${LINE_STRING})
  IF("${LINE_STRING_NO_INDENT}" STREQUAL "")
  # TART_DEBUG("Empty line found")
    SET(${INDENTATION_LEVEL} "-1" PARENT_SCOPE)
    SET(${STRIPPED_LINE_STRING} "" PARENT_SCOPE)
    RETURN()
  ENDIF()

  STRING(LENGTH ${LINE_STRING_NO_INDENT} LINE_LENGTH_STRIPPED)
  STRING(LENGTH ${LINE_STRING} LINE_LENGTH)
  MATH(EXPR INDENTATION "(${LINE_LENGTH} - ${LINE_LENGTH_STRIPPED}) / 2")

  STRING(REGEX REPLACE "[ \t]+$" "" LINE_STRING_NO_INDENT ${LINE_STRING_NO_INDENT})
  IF("${LINE_STRING_NO_INDENT}" STREQUAL "")
  # TART_DEBUG("Empty line found")
    SET(${INDENTATION_LEVEL} "-1" PARENT_SCOPE)
    SET(${STRIPPED_LINE_STRING} "" PARENT_SCOPE)
    RETURN()
  ENDIF()

  SET(${STRIPPED_LINE_STRING} "${LINE_STRING_NO_INDENT}" PARENT_SCOPE)
  SET(${INDENTATION_LEVEL} "${INDENTATION}" PARENT_SCOPE)
ENDFUNCTION(STRIP_YAML_LINE)

MACRO(LIST_REPLACE LIST INDEX NEW_VALUE)
  LIST(INSERT ${LIST} ${INDEX} ${NEW_VALUE})
  MATH(EXPR __INDEX "${INDEX} + 1")
  LIST(REMOVE_AT ${LIST} ${__INDEX})
ENDMACRO(LIST_REPLACE)

# NODE_TREE_NAMES()
# Create a A list of the tree hieerarchy name of each node
FUNCTION(NODE_TREE_NAMES NODE_NAMES NODE_INDENTS NODE_TREE_NAMES)
  SET(NODE_TREE_NAME_LIST "")
  LIST(LENGTH NODE_NAMES LIST_LENGTH)
  SET(NODE_INDEX 0)
  # FOREACH(NODE_NAME ${NODE_NAMES})
  WHILE(${NODE_INDEX} LESS ${LIST_LENGTH})
    LIST(GET NODE_NAMES ${NODE_INDEX} NODE_NAME)
    LIST(APPEND NODE_TREE_NAME_LIST ${NODE_NAME})
    # LIST(FIND NODE_NAMES ${NODE_NAME} NODE_INDEX)
    LIST(GET NODE_INDENTS ${NODE_INDEX} INDENT)
    SET(INDEX ${NODE_INDEX})
    SET(PREV_INDENT ${INDENT})
    SET(MIN_INDENT ${INDENT})

    WHILE(${INDEX} GREATER "0")
      MATH(EXPR INDEX "${INDEX} - 1")
      LIST(GET NODE_INDENTS ${INDEX} INDENT)
      LIST(GET NODE_NAMES ${INDEX} NODE_NAME)
      IF(${INDENT} LESS ${MIN_INDENT})
        LIST(GET NODE_TREE_NAME_LIST ${NODE_INDEX} CURRENT_TREE)
        LIST_REPLACE(NODE_TREE_NAME_LIST ${NODE_INDEX} "${NODE_NAME}>${CURRENT_TREE}")
        SET(MIN_INDENT ${INDENT})
      ENDIF()
    ENDWHILE()
    MATH(EXPR NODE_INDEX "${NODE_INDEX} + 1")
  ENDWHILE()
  # ENDFOREACH()
  SET(${NODE_TREE_NAMES} "${NODE_TREE_NAME_LIST}" PARENT_SCOPE)
ENDFUNCTION()


# PARSE_YAML()
# Function to parse a yaml file

FUNCTION(PARSE_YAML YAML_PATH NODE_NAMES NODE_VALS NODE_INDENTS)
# TART_DEBUG("YAML_PATH: " ${YAML_PATH})
  FILE(STRINGS ${YAML_PATH} YAML_CONTENT)
# TART_DEBUG("YAML_CONTENT: " ${YAML_CONTENT})

  SET(NODE_NAME_LIST "")
  SET(NODE_VALUE_LIST "")
  SET(NODE_INDENT_LIST "")
  SET(LAST_NODE_IS_LISTING FALSE)
  SET(LAST_INDENTATION_LEVEL "0")
  SET(LAST_NODE_IS_BRANCH_NODE FALSE)

  FOREACH(YAML_NODE ${YAML_CONTENT})
    STRIP_YAML_LINE(${YAML_NODE} YAML_NODE INDENTATION_LEVEL)
    IF("${YAML_NODE}" STREQUAL "")
    # TART_DEBUG("Empty line found")
      CONTINUE()
    ENDIF()
    IF("${INDENTATION_LEVEL}" STREQUAL "-1")
      MESSAGE(FATAL_ERROR "Indentation level invalid for line '${YAML_NODE}'")
      CONTINUE()
    ENDIF()

    # Find variable name
    STRING(REGEX MATCH "^[^:]+" NODE_NAME ${YAML_NODE})

    # Check if entry is part of a node list
    IF(${NODE_NAME} MATCHES "^-(.*)")
      # We are dealing with a list entry in the last node's NODE_NAME
      IF(${LAST_NODE_IS_LISTING})
        STRING(REPLACE "- " "" NODE_VALUE ${YAML_NODE})
        SET(NODE_NAME ${LISTING_NODE_NAME})
        SET(LAST_NODE_IS_BRANCH_NODE FALSE)
      ELSE()
        MESSAGE(FATAL_ERROR "Unexpected symbol '-' found. There is no list at '" ${NODE_NAME} "'")
      ENDIF()
    ELSE()
      # We are dealing with a new node entry
      IF(${YAML_NODE} MATCHES "(.*):$")
        # We have detected a node that has no entries, i.e. it is the beginning of a list
        SET(LAST_NODE_IS_LISTING TRUE)
        SET(LAST_NODE_IS_BRANCH_NODE TRUE)
        SET(NODE_VALUE "%%")
        # Store line if it was a node
        SET(LISTING_NODE_NAME "${NODE_NAME}")
      ELSE()
        # we are dealing with a one-line node
        STRING(REPLACE "${NODE_NAME}: " "" NODE_VALUE ${YAML_NODE})
        SET(LAST_NODE_IS_LISTING FALSE)
        SET(LAST_NODE_IS_BRANCH_NODE FALSE)
      ENDIF()
      LIST(APPEND NODE_INDENT_LIST "${INDENTATION_LEVEL}")
    ENDIF()

    # Set the exported list of variables
    IF(${LAST_NODE_IS_LISTING})
    # TART_DEBUG(${LISTING_NODE_NAME} ": ${${LISTING_NODE_NAME}} ${NODE_VALUE}")
      SET(${LISTING_NODE_NAME} "${${LISTING_NODE_NAME}} ${NODE_VALUE}")

      LIST(FIND NODE_NAME_LIST ${LISTING_NODE_NAME} INDEX)
      # check if NODE_VALUE already exists
      IF(${INDEX} GREATER -1)
        LIST(REMOVE_AT NODE_VALUE_LIST ${INDEX})
        # STRING(REPLACE "%%" "${LISTING_NODE_NAME}" NODE_VALS)
        STRING(REPLACE "%% " "" TMP_STRING ${${LISTING_NODE_NAME}})
        STRING(STRIP ${TMP_STRING} TMP_STRING)
        LIST(APPEND NODE_VALUE_LIST "${TMP_STRING}")
      ELSEIF("${NODE_VALUE}" STREQUAL "")
        # TART_DEBUG("Skip as node is opening a list")
      ELSE()
        # TART_DEBUG("New list entry")
        LIST(APPEND NODE_NAME_LIST ${LISTING_NODE_NAME})
        LIST(APPEND NODE_VALUE_LIST ${NODE_VALUE})
      ENDIF()
    ELSE()
    # TART_DEBUG(${NODE_NAME} ": ${NODE_VALUE}")
      SET(${NODE_NAME} "${NODE_VALUE}")
      LIST(APPEND NODE_NAME_LIST ${NODE_NAME})
      LIST(APPEND NODE_VALUE_LIST ${NODE_VALUE})
    ENDIF()
    SET(LAST_INDENTATION_LEVEL ${INDENTATION_LEVEL})
  ENDFOREACH()

  SET(${NODE_NAMES} "${NODE_NAME_LIST}" PARENT_SCOPE)
  SET(${NODE_VALS} "${NODE_VALUE_LIST}" PARENT_SCOPE)
  SET(${NODE_INDENTS} "${NODE_INDENT_LIST}" PARENT_SCOPE)
  # # Uncomment to display all CMAKE variables:
  # GET_CMAKE_PROPERTY(VARIABLE_NAMES VARIABLES)
  # FOREACH (VARIABLE_NAME ${VARIABLE_NAMES})
  #    TART_DEBUG("${VARIABLE_NAME}=${${VARIABLE_NAME}}")
  # ENDFOREACH()
ENDFUNCTION(PARSE_YAML)

FUNCTION(FIND_LIST_VALUE VAR_NAME NAME_LIST VAL_LIST VAL_OUTPUT)
  LIST(FIND NAME_LIST ${VAR_NAME} INDEX)
  IF(${INDEX} EQUAL -1)
  # TART_DEBUG("var ${VAR_NAME} undefined..")
    RETURN()
  ENDIF()

  LIST(GET VAL_LIST ${INDEX} TMP)
  SET(${VAL_OUTPUT} "${TMP}" PARENT_SCOPE)
ENDFUNCTION(FIND_LIST_VALUE)

FUNCTION(FIND_LIST_SUBNODES VAR_NAME NAME_LIST VAL_LIST INDENT_LIST SUBNODE_OUTPUT_LIST)
  LIST(FIND NAME_LIST ${VAR_NAME} INDEX)
  IF(${INDEX} EQUAL -1)
  # TART_DEBUG("var ${VAR_NAME} undefined..")
    RETURN()
  ENDIF()

  LIST(GET INDENT_LIST ${INDEX} PARENT_NODE_INDENT)
    
  SET(REACHED_NEXT_NODE FALSE)
  LIST(LENGTH INDENT_LIST LIST_LENGTH)
  
  WHILE(NOT REACHED_NEXT_NODE)
    MATH(EXPR INDEX "${INDEX} + 1")

    LIST(GET INDENT_LIST ${INDEX} TMP)
    TART_DEBUG("ITERATION:")
    TART_DEBUG(${INDEX})
    TART_DEBUG(${TMP})
    IF(${PARENT_NODE_INDENT} GREATER ${TMP})
      LIST(GET NAME_LIST ${INDEX} SUBNODE_NAME)
      TART_DEBUG(${SUBNODE_NAME})
      LIST(APPEND SUBNODE_NAMES ${SUBNODE_NAME})
    ELSE()
      SET(REACHED_NEXT_NODE TRUE)
    ENDIF()
    IF(${INDEX} GREATER ${LIST_LENGTH})
      BREAK()
    ENDIF()
  ENDWHILE()
  
  SET(${SUBNODE_OUTPUT_LIST} "${SUBNODE_NAMES}" PARENT_SCOPE)
ENDFUNCTION(FIND_LIST_SUBNODES)
