
# Get the latest abbreviated commit hash of the working branch
FUNCTION(GET_CURRENT_GITBRANCH GIT_REPO_DIR GIT_BRANCH_NAME)
  EXECUTE_PROCESS(
    COMMAND git rev-parse --abbrev-ref HEAD
    WORKING_DIRECTORY ${GIT_REPO_DIR}
    OUTPUT_VARIABLE GIT_BRANCH
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  SET(${GIT_BRANCH_NAME} "${GIT_BRANCH}" PARENT_SCOPE)
ENDFUNCTION(GET_CURRENT_GITBRANCH)

# Get latest git tag of current branch
FUNCTION(GET_LAST_GIT_TAG GIT_REPO_DIR GIT_TAG)
  EXECUTE_PROCESS(
    COMMAND git describe
    WORKING_DIRECTORY ${GIT_REPO_DIR}
    OUTPUT_VARIABLE LAST_TAG
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  SET(${GIT_TAG} "${LAST_TAG}" PARENT_SCOPE)
ENDFUNCTION(GET_LAST_GIT_TAG)

# Get the current working branch
FUNCTION(GET_CURRENT_GIT_COMMIT_ABBREVIATED_HASH GIT_REPO_DIR COMMIT_HASH)
  EXECUTE_PROCESS(
    COMMAND git log -1 --format=%h
    WORKING_DIRECTORY ${GIT_REPO_DIR}
    OUTPUT_VARIABLE GIT_COMMIT_HASH
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  SET(${COMMIT_HASH} "${GIT_COMMIT_HASH}" PARENT_SCOPE)
ENDFUNCTION(GET_CURRENT_GIT_COMMIT_ABBREVIATED_HASH)

# Clone git repo
FUNCTION(GIT_CLONE_REPO GIT_REPO_URL DESTINATION_DIR)
  EXECUTE_PROCESS(
    COMMAND cd ${DESTINATION_DIR} && git clone ${GIT_REPO_URL}
  )
ENDFUNCTION(GIT_CLONE_REPO)

# Clone git repo and checkout tag
FUNCTION(GIT_CLONE_REPO_AT_TAG GIT_REPO_URL DESTINATION_DIR DESIRED_TAG)
  EXECUTE_PROCESS(
    COMMAND cd ${DESTINATION_DIR} && git clone ${GIT_REPO_URL} && git checkout ${DESIRED_TAG}
  )
ENDFUNCTION(GIT_CLONE_REPO_AT_TAG)

# Check if directory is clone of git url
FUNCTION(CHECK_IS_DIR_GIT_REPO GIT_REPO_DIR GIT_REPO_URL DIR_IS_GIT_REPO)
  SET(${DIR_IS_GIT_REPO} FALSE PARENT_SCOPE)
  IF(EXISTS ${GIT_REPO_DIR})
    EXECUTE_PROCESS(
      COMMAND git config --get remote.origin.url
      WORKING_DIRECTORY ${GIT_REPO_DIR}
      OUTPUT_VARIABLE CURRENT_GIT_REMOTE_URL
    )
    IF(${CURRENT_GIT_REMOTE_URL} STREQUAL ${GIT_REPO_URL})
      SET(${DIR_IS_GIT_REPO} TRUE PARENT_SCOPE)
    ENDIF()
  ELSE()
    MESSAGE(SEND_ERROR "Directory does not exist for checked git repository")
  ENDIF()
ENDFUNCTION(GIT_CLONE_REPO_AT_TAG)
