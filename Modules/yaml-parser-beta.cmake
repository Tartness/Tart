# # STRIP_YAML_LINE()
# # This function takes a raw yaml line as input and returns the bare values
# #     stripped from comments and trailing spaces together with its original indentaton level
# FUNCTION(STRIP_YAML_LINE LINE_STRING STRIPPED_LINE_STRING INDENTATION_LEVEL)
#   # Strip comments form string
#   STRING(REGEX REPLACE "\#.*$" "" LINE_STRING ${LINE_STRING})
#   IF("${LINE_STRING}" STREQUAL "")
#   # TART_DEBUG("Empty line found")
#     SET(${INDENTATION_LEVEL} "-1" PARENT_SCOPE)
#     SET(${STRIPPED_LINE_STRING} "" PARENT_SCOPE)
#     RETURN()
#   ENDIF()
# 
#   # Strip leading/trailing spaces and comments
#   STRING(REGEX REPLACE "^[ ]+" "" LINE_STRING_NO_INDENT ${LINE_STRING})
#   IF("${LINE_STRING_NO_INDENT}" STREQUAL "")
#   # TART_DEBUG("Empty line found")
#     SET(${INDENTATION_LEVEL} "-1" PARENT_SCOPE)
#     SET(${STRIPPED_LINE_STRING} "" PARENT_SCOPE)
#     RETURN()
#   ENDIF()
# 
#   STRING(LENGTH ${LINE_STRING_NO_INDENT} LINE_LENGTH_STRIPPED)
#   STRING(LENGTH ${LINE_STRING} LINE_LENGTH)
#   MATH(EXPR INDENTATION "(${LINE_LENGTH} - ${LINE_LENGTH_STRIPPED}) / 2")
# 
#   STRING(REGEX REPLACE "[ \t]+$" "" LINE_STRING_NO_INDENT ${LINE_STRING_NO_INDENT})
#   IF("${LINE_STRING_NO_INDENT}" STREQUAL "")
#   # TART_DEBUG("Empty line found")
#     SET(${INDENTATION_LEVEL} "-1" PARENT_SCOPE)
#     SET(${STRIPPED_LINE_STRING} "" PARENT_SCOPE)
#     RETURN()
#   ENDIF()
# 
#   SET(${STRIPPED_LINE_STRING} "${LINE_STRING_NO_INDENT}" PARENT_SCOPE)
#   SET(${INDENTATION_LEVEL} "${INDENTATION}" PARENT_SCOPE)
# ENDFUNCTION(STRIP_YAML_LINE)

# WHITESPACE_TO_DELIMETER()
# This function replaces whitespaces in a string
#     ...
FUNCTION(WHITESPACE_TO_DELIMETER YAML_ENTRY_STRING OUT_STRING)
SET(DELIMETER "&")

  # Deprecated: repeat delimeter as often as indent level
  # FOREACH(LOOP_INDEX RANGE ${INDENTATION_LEVEL})
  #   SET(DELIMETER "${DELIMETER}&")
  # ENDFOREACH()
  

  # Strip leading/trailing spaces and comments
  STRING(REGEX REPLACE "[ ]" "${DELIMETER}" YAML_ENTRY_STRING ${YAML_ENTRY_STRING})
  STRING(REGEX REPLACE "[:][&]+" ": " YAML_ENTRY_STRING ${YAML_ENTRY_STRING})  
  STRING(REGEX REPLACE "[-][&]+" "- " YAML_ENTRY_STRING ${YAML_ENTRY_STRING})
  
  SET(${OUT_STRING} "${YAML_ENTRY_STRING}" PARENT_SCOPE)
ENDFUNCTION(WHITESPACE_TO_DELIMETER)

# PARSE_YAML()
# Function to parse a yaml file
FUNCTION(GET_YAML_ENTRIES_WITH_INDENDTS YAML_PATH ENTRIES ENTRY_INDENTS)
  FILE(STRINGS ${YAML_PATH} YAML_CONTENT)

  SET(ENTRY_LIST "")
  SET(ENTRY_INDENT_LIST "")

  FOREACH(YAML_NODE ${YAML_CONTENT})
    STRIP_YAML_LINE(${YAML_NODE} YAML_NODE INDENTATION_LEVEL)
    IF("${YAML_NODE}" STREQUAL "")
    TART_DEBUG("Empty line found")
      CONTINUE()
    ENDIF()
    IF("${INDENTATION_LEVEL}" STREQUAL "-1")
      MESSAGE(FATAL_ERROR "Indentation level invalid for line '${YAML_NODE}'")
      CONTINUE()
    ENDIF()
    WHITESPACE_TO_DELIMETER(${YAML_NODE} YAML_NODE)
    LIST(APPEND ENTRY_INDENT_LIST ${INDENTATION_LEVEL})
    LIST(APPEND ENTRY_LIST ${YAML_NODE})
  ENDFOREACH()

  SET(${ENTRIES} "${ENTRY_LIST}" PARENT_SCOPE)
  SET(${ENTRY_INDENTS} "${ENTRY_INDENT_LIST}" PARENT_SCOPE)
ENDFUNCTION(GET_YAML_ENTRIES_WITH_INDENDTS)
