# WHITESPACE_TO_DELIMETER()
# This function replaces whitespaces in a string
#     ...
FUNCTION(WHITESPACE_TO_DELIMETER YAML_ENTRY_STRING OUT_STRING)
SET(DELIMETER "&")
  # Strip leading/trailing spaces and comments
  STRING(REGEX REPLACE "[ ]" "${DELIMETER}" YAML_ENTRY_STRING ${YAML_ENTRY_STRING})
  STRING(REGEX REPLACE "[:][&]+" ": " YAML_ENTRY_STRING ${YAML_ENTRY_STRING})  
  STRING(REGEX REPLACE "[-][&]+" "- " YAML_ENTRY_STRING ${YAML_ENTRY_STRING})
  
  SET(${OUT_STRING} "${YAML_ENTRY_STRING}" PARENT_SCOPE)
ENDFUNCTION(WHITESPACE_TO_DELIMETER)

# GET_YAML_ENTRIES_WITH_INDENDTS()
# Function to parse a yaml file
FUNCTION(GET_YAML_ENTRIES_WITH_INDENDTS YAML_PATH ENTRIES ENTRY_INDENTS)
  FILE(STRINGS ${YAML_PATH} YAML_CONTENT)

  SET(ENTRY_LIST "")
  SET(ENTRY_INDENT_LIST "")

  FOREACH(YAML_NODE ${YAML_CONTENT})
    STRIP_YAML_LINE(${YAML_NODE} YAML_NODE INDENTATION_LEVEL)
    IF("${YAML_NODE}" STREQUAL "")
    TART_DEBUG("Empty line found")
      CONTINUE()
    ENDIF()
    IF("${INDENTATION_LEVEL}" STREQUAL "-1")
      MESSAGE(FATAL_ERROR "Indentation level invalid for line '${YAML_NODE}'")
      CONTINUE()
    ENDIF()
    WHITESPACE_TO_DELIMETER(${YAML_NODE} YAML_NODE)
    LIST(APPEND ENTRY_INDENT_LIST ${INDENTATION_LEVEL})
    LIST(APPEND ENTRY_LIST ${YAML_NODE})
  ENDFOREACH()

  SET(${ENTRIES} "${ENTRY_LIST}" PARENT_SCOPE)
  SET(${ENTRY_INDENTS} "${ENTRY_INDENT_LIST}" PARENT_SCOPE)
ENDFUNCTION(GET_YAML_ENTRIES_WITH_INDENDTS)

# GET_ENTRY_SUBTREE()
# Function to parse a yaml file
FUNCTION(GET_ENTRY_SUBTREE QUERY_ENTRY ENTRIES INDENTS CHILD_ENTRIES CHILD_INDENTS)
  LIST(FIND ENTRIES ${QUERY_ENTRY} QUERY_INDEX)
  LIST(LENGTH ENTRIES ENTRY_LIST_LENGTH)
  
  LIST(GET INDENTS ${QUERY_INDEX} QUERY_INDENT)

  MATH(EXPR CURRENT_INDEX "${QUERY_INDEX} + 1")
  LIST(GET INDENTS ${CURRENT_INDEX} CURRENT_INDENT)

  WHILE(${CURRENT_INDENT} GREATER ${QUERY_INDENT})
    LIST(APPEND INDENT_SUBLIST ${CURRENT_INDENT})
    LIST(GET ENTRIES ${CURRENT_INDEX} CURRENT_ENTRY)
    LIST(APPEND ENTRY_SUBLIST ${CURRENT_ENTRY})
    
    MATH(EXPR CURRENT_INDEX "${CURRENT_INDEX} + 1")
    LIST(GET INDENTS ${CURRENT_INDEX} CURRENT_INDENT)
  ENDWHILE()
  SET(${CHILD_INDENTS} "${INDENT_SUBLIST}" PARENT_SCOPE)
  SET(${CHILD_ENTRIES} "${ENTRY_SUBLIST}" PARENT_SCOPE)
ENDFUNCTION(GET_ENTRY_SUBTREE)

# GET_ENTRY_VALUE()
# Function to parse a yaml file
FUNCTION(GET_ENTRY_VALUE QUERY_ENTRY ENTRIES ENTRY_INDENTS VALUES HAS_SUBTREE)
  LIST(FIND ENTRIES ${QUERY_ENTRY} QUERY_INDEX)
  LIST(LENGTH ENTRIES ENTRY_LIST_LENGTH)
  LIST(GET ENTRY_INDENTS ${QUERY_INDEX} QUERY_INDENT)

  MATH(EXPR CURRENT_INDEX "${QUERY_INDEX} + 1")
  LIST(GET ENTRY_INDENTS ${CURRENT_INDEX} CURRENT_INDENT)
  TART_TMP("${QUERY_INDENT}")
  TART_TMP("${CURRENT_INDENT}")

  WHILE(${CURRENT_INDENT} GREATER ${QUERY_INDENT})
    LIST(GET ENTRIES ${CURRENT_INDEX} CURRENT_ENTRY)
    MATH(EXPR PARENT_INDENT "${CURRENT_INDENT} - 1")
    TART_TMP("${PARENT_INDENT}")
    TART_TMP("${QUERY_INDENT}")
    TART_TMP("${CURRENT_ENTRY}")
    IF(${PARENT_INDENT} EQUAL ${QUERY_INDENT})
      LIST(APPEND VALUES_LIST ${CURRENT_ENTRY})
    ENDIF()
    
    
    MATH(EXPR CURRENT_INDEX "${CURRENT_INDEX} + 1")
    LIST(GET ENTRY_INDENTS ${CURRENT_INDEX} CURRENT_INDENT)
  ENDWHILE()
  SET(${VALUES} "${VALUES_LIST}" PARENT_SCOPE)
ENDFUNCTION(GET_ENTRY_VALUE)
